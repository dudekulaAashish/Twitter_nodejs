const express = require("express");
const path = require("path");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const dbPath = path.join(__dirname, "twitterClone.db");
const app = express();

app.use(express.json());

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({ filename: dbPath, driver: sqlite3.Database });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error: ${e.message}`);
    process.exit(-1);
  }
};
initializeDBAndServer();
//Middleware Function
const logger = (request, response, next) => {
  next();
};

const authenticateToken = (request, response, next) => {
  let jwtToken;
  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "qwertyuiop", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        request.username = payload.username;

        next();
      }
    });
  }
};

// API 1 Register
app.post("/register/", async (request, response) => {
  const { username, password, name, gender } = request.body;
  const hashedPassword = await bcrypt.hash(request.body.password, 10);
  const userExistQuery = `
    SELECT 
        username
    FROM 
        user 
    WHERE 
        username = '${username}'
  `;
  const dbUser = await db.get(userExistQuery);
  if (dbUser === undefined) {
    const addUser = `
        INSERT INTO 
            user (username, password, name, gender)
        VALUES 
            (
                '${username}',
                '${hashedPassword}',
                '${name}',
                '${gender}'
            );`;

    if (password.length < 6) {
      response.status(400);
      response.send("Password is too short");
    } else {
      await db.run(addUser);
      response.send("User created successfully");
    }
  } else {
    response.status(400);
    response.send("User already exists");
  }
});
// API 2 LOGIN
app.post("/login/", async (request, response) => {
  const { username, password } = request.body;
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}'`;
  const dbUser = await db.get(selectUserQuery);
  if (dbUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password);
    if (isPasswordMatched) {
      const payload = {
        username: username,
      };
      const jwtToken = jwt.sign(payload, "qwertyuiop");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});

//Tweet
/*
app.get("/tweet/:userId/", async (req, res) => {
  const { userId } = req.params;
  const getTweeter = `
    SELECT 
        *
    FROM
        tweet 
    WHERE 
        user_id = ${userId};`;
  const r = await db.all(getTweeter);
  res.send(r);
});
*/

//API 3
app.get("/user/tweets/feed/", authenticateToken, async (request, response) => {
  const { limit } = request.query;
  const username = "JoeBiden";
  const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
  const user_id = await db.get(getUserId);
  const userId = user_id.user_id;

  const getQuery = `
        SELECT 
            following_user_id
        FROM 
            user INNER JOIN follower ON user.user_id = follower.follower_user_id
        WHERE 
            user_id = ${userId};
    `;
  const result = await db.all(getQuery);
  const arr = [];
  const l = result.length - 1;
  for (i = 0; i <= l; i++) {
    arr.push(result[i].following_user_id);
  }

  const tweetsData = [];

  for (i = 0; i < arr.length; i++) {
    const tweeter_data = `
    SELECT 
        username,
        tweet,
        date_time as dateTime
    FROM 
        user NATURAL JOIN tweet 
    WHERE 
        user_id = ${arr[i]}
    LIMIT ${limit}    
    `;
    const tweets = await db.get(tweeter_data);
    tweetsData.push(tweets);
  }
  response.send(tweetsData);
});

//Follower Table Data
/*
app.get("/follower/", authenticateToken, async (req, res) => {
  const getFollower = `
    SELECT 
        * 
    FROM 
        follower 
    `;
  const data = await db.all(getFollower);
  res.send(data);
});
*/
//API 4
app.get("/user/following/", authenticateToken, async (request, response) => {
  const username = "JoeBiden";
  const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
  const user_id = await db.get(getUserId);
  const userId = user_id.user_id;
  const getQuery = `
        SELECT 
            following_user_id
        FROM 
            user INNER JOIN follower ON user.user_id = follower.follower_user_id
        WHERE 
            user_id = ${userId};
    `;
  const result = await db.all(getQuery);
  const arr = [];
  const l = result.length - 1;
  for (i = 0; i <= l; i++) {
    arr.push(result[i].following_user_id);
  }
  const arr_2 = [];
  for (i = 0; i < arr.length; i++) {
    const getUser = `
        SELECT name
        FROM user 
        WHERE 
            user_id = ${arr[i]};
        `;
    const res = await db.all(getUser);
    arr_2.push(res[0]);
  }
  response.send(arr_2);
});

//API 5
app.get("/user/followers/", authenticateToken, async (request, response) => {
  const username = "JoeBiden";
  const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
  const user_id = await db.get(getUserId);
  const userId = user_id.user_id;
  const getQuery = `
        SELECT 
            follower_user_id
        FROM 
            user INNER JOIN follower ON user.user_id = follower.following_user_id
        WHERE 
            user_id = ${userId};
    `;
  const result = await db.all(getQuery);
  const arr = [];
  const l = result.length - 1;
  for (i = 0; i <= l; i++) {
    arr.push(result[i].follower_user_id);
  }
  const arr_2 = [];
  for (i = 0; i < arr.length; i++) {
    const getUser = `
        SELECT name
        FROM user 
        WHERE 
            user_id = ${arr[i]};
        `;
    const res = await db.all(getUser);
    arr_2.push(res[0]);
  }
  response.send(arr_2);
});

//API 6
app.get("/tweets/:tweetId/", authenticateToken, async (request, response) => {
  const { tweetId } = request.params;
  const username = "JoeBiden";
  const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
  const id = await db.get(getUserId);
  const userId = id.user_id;

  const getQuery = `
        SELECT 
            following_user_id
        FROM 
            user INNER JOIN follower ON user.user_id = follower.follower_user_id
        WHERE 
            user_id = ${userId};
    `;
  const result = await db.all(getQuery);
  const arr = [];

  const l = result.length - 1;
  for (i = 0; i <= l; i++) {
    arr.push(result[i].following_user_id);
  }

  const tweeterQuery = `
  SELECT 
    user_id
  FROM 
    tweet 
  WHERE
    tweet_id = ${tweetId}`;
  const tweeter_data = await db.get(tweeterQuery);

  const person_id = tweeter_data.user_id;

  let bool_value = false;
  for (i = 0; i <= arr.length - 1; i++) {
    if (person_id === arr[i]) {
      bool_value = true;
    }
  }
  if (bool_value) {
    const getQuery = `
    SELECT 
        tweet,
        count(like_id) AS likes,
        count(reply_id) AS replies,
        date_time AS dateTime
    FROM 
        (tweet INNER JOIN reply) as T INNER JOIN  like  
   `;
    const ans = await db.all(getQuery);
    response.send(ans);
  } else {
    response.status(401);
    response.send("Invalid Request");
  }
});

//API 7
app.get(
  "/tweets/:tweetId/likes/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const username = "JoeBiden";
    const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
    const id = await db.get(getUserId);
    const userId = id.user_id;
    const getQuery = `
        SELECT 
            following_user_id
        FROM 
            user INNER JOIN follower ON user.user_id = follower.follower_user_id
        WHERE 
            user_id = ${userId};
    `;
    const result = await db.all(getQuery);
    const arr = [];

    const l = result.length - 1;
    for (i = 0; i <= l; i++) {
      arr.push(result[i].following_user_id);
    }

    const tweeterQuery = `
    SELECT 
        user_id
    FROM 
        tweet 
    WHERE
        tweet_id = ${tweetId}`;
    const tweeter_data = await db.get(tweeterQuery);

    const person_id = tweeter_data.user_id;

    let bool_value = false;
    let t;
    for (i = 0; i <= arr.length - 1; i++) {
      if (person_id === arr[i]) {
        bool_value = true;
      }
    }
    const likes_by = [];

    const final_result = { likes: "ABC" };
    if (bool_value) {
      const getQuery = `
    SELECT 
        name
    FROM 
        like INNER JOIN user ON like.user_id = user.user_id
    WHERE
        tweet_id = ${tweetId}  
    
   `;
      const ans = await db.all(getQuery);
      for (i = 0; i <= ans.length - 1; i++) {
        likes_by.push(ans[i].name);
      }
      final_result.likes = likes_by;
      response.send(final_result);
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

//API 8
app.get(
  "/tweets/:tweetId/replies/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const username = "JoeBiden";
    const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
    const id = await db.get(getUserId);
    const userId = id.user_id;

    const getQuery = `
        SELECT 
            following_user_id
        FROM 
            user INNER JOIN follower ON user.user_id = follower.follower_user_id
        WHERE 
            user_id = ${userId};
    `;
    const result = await db.all(getQuery);
    const arr = [];

    const l = result.length - 1;
    for (i = 0; i <= l; i++) {
      arr.push(result[i].following_user_id);
    }

    const tweeterQuery = `
    SELECT 
        user_id
    FROM 
        tweet 
    WHERE
        tweet_id = ${tweetId}`;
    const tweeter_data = await db.get(tweeterQuery);
    const person_id = tweeter_data.user_id;

    let bool_value = false;
    let t;
    for (i = 0; i <= arr.length - 1; i++) {
      if (person_id === arr[i]) {
        bool_value = true;
      }
    }
    const reply = [];
    const final_result = { replies: "ABC" };
    if (bool_value) {
      const getQuery = `
    SELECT 
        name,
        reply
    FROM 
        reply INNER JOIN user ON reply.user_id = user.user_id
    WHERE
        tweet_id = ${tweetId}  
    
   `;
      const ans = await db.all(getQuery);
      for (i = 0; i <= ans.length - 1; i++) {
        final_result.replies = ans[i];
      }
      response.send(final_result);
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

//API 9
app.get("/user/tweets/", authenticateToken, async (request, response) => {
  const username = "JoeBiden";
  const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
  const id = await db.get(getUserId);
  const userId = id.user_id;
  const getQuery = `
    SELECT 
        tweet,
        like_id as likes,
        reply_id as replies,
        date_time as dateTime
    FROM 
        (tweet NATURAL JOIN reply) as t NATURAL JOIN 
        like 
    WHERE 
        user_id = ${userId}
    `;
  const res = await db.all(getQuery);
  response.send(res);
});

//API 10
app.post("/user/tweets/", authenticateToken, async (request, response) => {
  const { tweet } = request.body;
  const username = "JoeBiden";
  const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
  const id = await db.get(getUserId);
  const userId = id.user_id;
  const createTweet = `
    INSERT INTO 
        tweet (tweet,user_id)
    VALUES
    (
        '${tweet}',
        ${userId}
    )
    `;
  await db.run(createTweet);
  response.send("Created a Tweet");
});

//API 11
app.delete(
  "/tweets/:tweetId/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const username = "JoeBiden";
    const getUserId = `SELECT 
        user_id
    FROM 
        user 
    WHERE 
        username = '${username}';`;
    const id = await db.get(getUserId);
    const userId = id.user_id;

    const tweeterQuery = `
  SELECT 
    user_id
  FROM 
    tweet 
  WHERE
    tweet_id = ${tweetId}`;
    const tweeter_data = await db.get(tweeterQuery);

    const person_id = tweeter_data.user_id;

    if (person_id === userId) {
      const deleteTweet = `
    DELETE FROM 
        tweet
    WHERE 
        user_id = ${userId}
    `;
      await db.run(deleteTweet);
      response.send("Tweet Removed");
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

module.exports = app;
